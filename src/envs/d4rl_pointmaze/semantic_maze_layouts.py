"""Utility functions for semantic mazes."""

import numpy as np
import re


SEMANTIC_MAZE_1_LAYOUT = np.asarray(
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,2,2,2,2,2,2,0,3,3,3,0,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,1,1,1,1,1,0,1,1,1,1,1,-1,2,2,2,2,2,2,2,0,3,3,3,0,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,2,2,2,2,2,0,0,0,3,3,0,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,2,2,2,2,2,2,2,-1,3,3,3,0,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,2,2,2,2,2,2,0,0,0,3,3,0,3,3,3,3,3,3,3,0,4,4,4,4,0],
        [0,1,1,0,1,0,1,1,0,1,1,1,1,1,0,2,2,2,2,2,2,2,0,3,3,3,0,3,0,3,0,3,3,3,0,4,0,4,0,0],
        [0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0],
        [0,5,5,0,5,0,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,0,7,7,7,7,7,0,7,0,7,7,7,0,0,0,8,0,0],
        [0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,0,7,7,0,0,0,8,8,8,0],
        [0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,0,7,7,7,-1,8,8,8,8,0],
        [0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,0,0,0,8,8,8,0],
        [0,5,5,5,5,5,5,5,5,5,0,5,0,5,0,6,6,0,6,0,6,6,0,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,0],
        [0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,9,9,9,9,9,9,9,9,9,0,9,0,9,0,10,10,0,10,0,10,10,0,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,0,0,0,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,0,0,0,0,0,0,10,10,10,10,10,10,10,-1,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,0,0,0,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,10,10,10,10,10,10,0,11,11,11,11,0,0,0,0,0,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,9,-1,10,10,10,10,10,10,10,0,11,11,11,11,0,11,11,11,0,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,10,10,10,10,10,10,0,11,11,11,11,0,11,11,11,0,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,0,11,11,11,11,0,11,11,11,11,11,11,0,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,0,0,0,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,-1,12,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,0,0,0,12,12,12,0],
        [0,9,9,9,9,9,9,9,9,9,0,9,0,9,0,10,10,0,10,0,10,10,0,11,11,11,11,0,11,0,11,11,11,11,0,12,12,12,12,0],
        [0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],
        [0,13,13,13,13,13,13,13,13,13,0,13,0,13,0,14,14,0,14,0,14,14,0,15,15,15,15,0,15,0,15,15,15,15,0,16,16,16,16,0],
        [0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,0],
        [0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,0,0,0,0,0,0,16,16,16,0],
        [0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,0,0,0,0,0,0,15,15,15,15,15,15,15,0,15,15,15,-1,16,16,16,16,0],
        [0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,0,14,14,14,0,0,0,15,15,15,15,15,15,0,15,15,0,0,0,16,16,16,0],
        [0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,0,14,14,14,14,-1,15,15,15,15,15,15,15,0,15,15,15,0,16,16,16,16,0],
        [0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,0,0,0,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,0],
        [0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    ]
)


SEMANTIC_MAZE_2_LAYOUT = np.asarray(
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,16,16,16,16,16,0,15,15,15,15,15,15,15,15,15,15,15,0,0,0,14,14,14,14,14,14,0,13,13,13,13,13,13,13,13,13,13,13,0],
        [0,16,16,16,16,0,0,0,15,15,0,15,15,15,15,15,15,15,15,-1,14,14,14,14,14,14,14,0,13,13,13,13,13,13,13,13,13,13,13,0],
        [0,16,16,16,16,16,-1,15,15,15,0,15,15,15,15,15,15,15,0,0,0,14,14,14,14,14,14,0,13,13,13,13,13,13,13,13,13,13,13,0],
        [0,16,16,16,16,0,0,0,15,15,0,15,0,15,0,15,15,15,15,0,14,14,14,0,14,0,14,0,13,13,13,0,13,0,13,13,13,13,13,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],
        [0,12,12,12,12,12,0,11,11,11,0,11,0,11,0,11,11,11,11,0,10,10,10,0,10,0,10,0,9,9,9,0,9,0,9,9,9,9,9,0],
        [0,12,12,12,12,0,0,0,11,11,0,11,11,11,11,11,11,11,0,0,0,10,10,10,10,10,10,0,9,9,9,0,9,9,9,9,9,9,9,0],
        [0,12,12,12,12,12,-1,11,11,11,0,11,11,11,11,11,11,11,11,-1,10,10,10,10,10,10,0,0,0,9,9,0,9,9,9,9,0,9,9,0],
        [0,12,12,12,12,0,0,0,11,11,0,11,11,11,11,0,11,11,0,0,0,10,10,10,10,10,10,-1,9,9,9,0,0,0,0,0,0,9,9,0],
        [0,12,12,12,12,12,0,11,11,11,0,11,11,11,11,0,11,11,11,0,10,10,10,10,10,10,0,0,0,9,9,9,9,9,9,9,9,9,9,0],
        [0,12,12,12,12,12,0,11,11,11,11,11,11,11,11,0,11,11,11,0,10,10,10,10,10,10,10,0,9,9,9,9,9,9,9,9,9,9,9,0],
        [0,12,12,12,12,12,0,11,11,11,11,11,11,11,11,0,11,11,11,0,10,0,10,0,10,10,10,0,9,9,9,9,9,9,9,0,9,0,9,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],
        [0,8,8,8,8,8,0,7,7,7,7,7,7,7,7,0,7,7,7,0,6,0,6,0,6,6,6,0,5,5,5,5,5,5,5,0,5,0,5,0],
        [0,8,8,8,8,8,0,7,7,7,7,7,7,7,7,0,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,5,5,5,5,5,5,5,5,0],
        [0,8,8,8,8,8,0,7,7,7,7,7,7,7,7,0,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,5,5,5,5,5,5,5,5,0],
        [0,8,8,8,8,8,0,7,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,0,5,5,5,5,5,5,5,0],
        [0,8,8,8,8,0,0,0,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,0,5,5,5,5,5,5,5,0],
        [0,8,8,8,8,8,-1,7,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,0,0,0,0,0,0,0,0,0],
        [0,8,8,8,8,0,0,0,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,0,5,5,5,5,5,5,5,0],
        [0,8,8,8,8,8,0,7,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,0,5,5,5,5,5,5,5,0],
        [0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,5,5,5,5,5,5,5,5,0],
        [0,8,8,8,8,8,0,7,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,5,5,5,5,5,5,5,5,0],
        [0,8,8,8,8,8,0,7,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,5,5,5,5,5,5,5,5,0],
        [0,8,0,8,0,8,0,7,7,0,7,0,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,0,5,5,5,5,0,5,0,5,5,5,5,0],
        [0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],
        [0,4,0,4,0,4,0,3,3,0,3,0,3,3,3,3,3,3,3,0,2,2,2,2,2,2,2,0,1,1,1,1,0,1,0,1,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,0,3,3,3,0,0,0,2,2,0,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,0,3,3,3,3,-1,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,0,3,3,3,0,0,0,2,2,0,2,2,2,0,1,1,1,1,1,1,1,0,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,0,3,3,3,3,0,2,2,2,0,2,2,2,0,1,1,1,1,1,1,1,0,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,0,3,3,3,3,0,2,2,2,0,2,2,2,0,1,1,1,0,0,0,0,0,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,2,0,0,0,1,1,1,1,1,1,1,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,2,2,-1,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,2,0,0,0,1,1,1,1,1,1,1,1,1,1,0],
        [0,4,4,4,4,4,0,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    ]
)

# first tuple = (x,y) coordinate, second tuple = connected room IDs
SEMANTIC_MAZE_1_BOUNDARIES = {
    (5, 14): [1, 2], (10, 4): [1, 5], (7, 22): [2, 3], (10, 29): [3, 7], (10, 37): [4, 8],
    (16, 11): [5, 9], (16, 18): [6, 10], (13, 34): [7, 8], (23, 14): [9, 10], (20, 22): [10, 11],
    (27, 34): [11, 12], (30, 11): [9, 13], (30, 18): [10, 14], (30, 28): [11, 15],
    (36, 22): [14, 15], (34, 34): [15, 16],
}


SEMANTIC_MAZE_2_BOUNDARIES = {
    (3, 6): [16, 15], (2, 19): [15, 14], (5, 13): [15, 11], (5, 24): [14, 10], (5, 32): [13, 9],
    (8, 6): [12, 11], (8, 19): [11, 10], (9, 27): [10, 9], (13, 22): [10, 6], (13, 36): [9, 5],
    (19, 6): [8, 7], (26, 3): [8, 4], (26, 10): [7, 3], (26, 33): [5, 1], (30, 19): [3, 2],
    (36, 27): [2, 1],
}


# maps semantic skill string (roomA-roomB) to integer skill ID (for 1-hot encoding)
SKILL2ID = {
    '1-2': 0, '2-3': 1, '1-5': 2, '3-7': 3, '4-8': 4, '7-8': 5, '5-9': 6, '6-10': 7, '9-10': 8,
    '10-11': 9, '11-12': 10, '9-13': 11, '10-14': 12, '11-15': 13, '14-15': 14, '15-16': 15,
    '2-1': 16, '3-2': 17, '5-1': 18, '7-3': 19, '8-4': 20, '8-7': 21, '9-5': 22, '10-6': 23,
    '10-9': 24, '11-10': 25, '12-11': 26, '13-9': 27, '14-10': 28, '15-11': 29, '15-14': 30, '16-15': 31,
    '1': 32, '2': 33, '3': 34, '4': 35, '5': 36, '6': 37, '7': 38, '8': 39, '9': 40, '10': 41,
    '11': 42, '12': 43, '13': 44, '14': 45, '15': 46, '16': 47,
}


SEMANTIC_MAZE_LAYOUTS = {
    1: (SEMANTIC_MAZE_1_LAYOUT, SEMANTIC_MAZE_1_BOUNDARIES),
    2: (SEMANTIC_MAZE_2_LAYOUT, SEMANTIC_MAZE_2_BOUNDARIES),
}


def semantic_layout2str(layout):
    """Converts a semantic layout matrix to string format that is used by MazeEnv class."""
    output_str = ""
    for row in layout:
        for cell in row:
            output_str += "#" if cell == 0 else "O"
        output_str += "\\"
    output_str = output_str[:-1]    # remove last line break
    output_str = re.sub("O", "G", output_str, count=1)   # add goal at random position
    return output_str


def xy2id(x, y, layout_matrix):
    """Converts (x,y) coordinates to room ID."""
    return layout_matrix[xy2coord(x, y)]


def xy2coord(x, y):
    """Converts (x,y) mujoco env coordinates to cell indices."""
    return int(x+0.5), int(y+0.5)


